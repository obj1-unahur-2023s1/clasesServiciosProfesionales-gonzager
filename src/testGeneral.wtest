import universidad.*
import profesionales.*
import empresas.*
import solicitantes.*
describe "Test Empresa" {

	const sanMartin = new Universidad(provincia="Buenos Aires", honoriosRecomendados=3500)
	const rosario =new Universidad(provincia="Santa Fe", honoriosRecomendados=2800)
	const corrientes = new Universidad(provincia="Corrientes", honoriosRecomendados=4200)
	const hurlingham = new Universidad(provincia="Buenos Aires", honoriosRecomendados=8800)

	const juana = new Vinculado(universidad=rosario)
	const melina = new Asociado(universidad=corrientes)
	const rocio = new Libres(universidad=hurlingham, honorarios = 5000, puedeTrabajar=#{"Santa Fe", "Cordoba", "Buenos Aires"})
	const luciana = new Libres(universidad=rosario, honorarios = 3200, puedeTrabajar=#{"Santa Fe", "Entre Rios"})

	const emp1 = new Empresa(honorariosDeReferencia= 3500,profesionales=#{juana, melina, rocio, luciana})

	const gerardo = new Persona(provinciaDondeVive="Corrientes")
	const muni1 = new Institucion(universidadesQueReconoce=#{rosario,hurlingham})
	const muni2 = new Institucion(universidadesQueReconoce=#{sanMartin})

	test "cuantosEstudiaronEn Rosario" {
		assert.equals(2, emp1.cuantosEstudiaronEn(rosario))
	}
	
	test "cuantosEstudiaronEn Hurlingham" {
		assert.equals(1, emp1.cuantosEstudiaronEn(hurlingham))
	}
	
	test "cuantosEstudiaronEn San Martin" {
		assert.equals(0, emp1.cuantosEstudiaronEn(sanMartin))
	}	
	
	test "profesionalesCaros es Rocio" {
		assert.equals(#{rocio}, emp1.profesionalesCaros())
	}
	
	test "universidadesFormadoras" {
		assert.equals(#{rosario,  hurlingham, corrientes}, emp1.universidadesFormadoras())
	}
	
	test "universidadesFormadoras no es formadora" {
		assert.notThat( emp1.universidadesFormadoras().contains(sanMartin))
	}
	
	test "profesionalMasBarato" {
		assert.equals(juana, emp1.profesionalMasBarato())
	}
	
	test "esDeGenteAcotadaAll" {
		assert.that(emp1.esDeGenteAcotadaAll())
	}
	
	test "gerardo puede ser atentido por melina" {
		assert.that(gerardo.puedeSerAtendido(melina))
	}
	
	test "gerardo NO puede ser atentido por melina" {
		assert.notThat(gerardo.puedeSerAtendido(juana))
	}
	
	test "la emp1 puede atender a gerardo" {
		assert.that(emp1.puedeSatisfacer(gerardo))
	}
	
	test "la emp1 puede atender a muni1" {
		assert.that(emp1.puedeSatisfacer(muni1))
	}
	
	test "la emp1 No puede atender a muni2" {
		assert.notThat(emp1.puedeSatisfacer(muni2))
	}	
	
			
}

